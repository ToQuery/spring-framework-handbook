@startuml

' -----------------------------------------------------
'skinparam defaultTextAlignment center
' -----------------------------------------------------
'top to bottom direction
left to right direction

package "org" {


    package "aopalliance" #DDDDDD {

        package "aop" {

          interface Advice

          class AspectException

          RuntimeException <|-- AspectException

        }

        package "intercept" {

          interface ConstructorInterceptor{
            Object construct(ConstructorInvocation invocation) throws Throwable
          }

          interface ConstructorInvocation {
             Constructor<?> getConstructor()
          }

          Invocation <|-- ConstructorInvocation

          interface Interceptor

          Advice <|- Interceptor

          interface Invocation{
            Object[] getArguments()
          }

          Joinpoint <|-- Invocation

          interface Joinpoint{
            Object proceed() throws Throwable
            Object getThis()
            AccessibleObject getStaticPart()
          }
          interface MethodInterceptor{
            Object invoke(MethodInvocation invocation) throws Throwable
          }

          Interceptor <|-- MethodInterceptor

          interface MethodInvocation{
            Method getMethod()
          }

          Invocation <|-- MethodInvocation
        }
    }

    package "springframework.aop" {
        interface Advisor{
            Advice EMPTY_ADVICE = new Advice(){}
            Advice getAdvice()
            boolean isPerInstance()
        }

        interface AfterAdvice{

        }

        Advice <|- AfterAdvice

        interface AfterReturningAdvice{
            void afterReturning(@Nullable Object returnValue, Method method, Object[] args, @Nullable Object target) throws Throwable
        }

        AfterAdvice <|- AfterReturningAdvice

        class AopInvocationException

        NestedRuntimeException <|-- AopInvocationException


        interface BeforeAdvice

        Advice <|- BeforeAdvice

        interface ClassFilter{
            boolean matches(Class<?> clazz);
        	ClassFilter TRUE = TrueClassFilter.INSTANCE
        }

        interface DynamicIntroductionAdvice{
            boolean implementsInterface(Class<?> intf)
        }

        Advice <|- DynamicIntroductionAdvice

        interface IntroductionAdvisor{
            ClassFilter getClassFilter()
        	void validateInterfaces() throws IllegalArgumentException
        }

        Advisor <|-- IntroductionAdvisor

        IntroductionInfo <|-- IntroductionAdvisor

        interface IntroductionAwareMethodMatcher{
            boolean matches(Method method, Class<?> targetClass, boolean hasIntroductions)
        }

        MethodMatcher <|-- IntroductionAwareMethodMatcher

    }
}
@enduml